{"version":3,"file":"index.es5.js","sources":["../src/services/authentication.ts","../src/index.ts"],"sourcesContent":["\n// import { getAccessToken, getApiVersion, requestGet } from \"../utils/utils\";\nimport { IUser, LexioRequest } from \"../index\";\n// import { getServiceHost } from \"../serviceRegistry\";\n\n/**\n *\n * @param {Array<string>} ids\n * @param {string} apiVersion\n * @returns {Promise<Array<IUser>>}\n */\nexport async function getUsers(req: LexioRequest | undefined, ids: Array<string>): Promise<Array<IUser>> {\n\n  return [];\n  // const apiVersion: string = getApiVersion(req);\n  // const accessToken: string = getAccessToken(req);\n  //\n  // const serviceHost: string = getServiceHost(apiVersion, 'lexio-authentication');\n  //\n  // const filters = {where: {id: {inq: ids}}};\n  //\n  // const uri: string = `${serviceHost}/api/users?access_token=${accessToken}&filters=${JSON.stringify(filters)}`;\n  //\n  // const options = {\n  //   uri,\n  //   qs: {\n  //     access_token: accessToken,\n  //     filters: JSON.stringify(filters),\n  //   },\n  //   headers: {\n  //     'ApiVersion': req\n  //   },\n  //   json: true // Automatically parses the JSON string in the response\n  // };\n  //\n  // return await requestGet<Array<IUser>>(options);\n}\n\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n  // import \"core-js/fn/array.find\"\n  // ...\nimport { getUsers } from \"./services/authentication\";\nimport { Request } from \"express\";\n\nexport const LATEST_API_VERSION = '5.0';\n\nexport default class Lexio {\n\n  /**\n   *\n   */\n  private _originalReq: LexioRequest | undefined = undefined;\n\n  constructor() {\n\n  }\n\n  /**\n   *\n   * @param {LexioRequest} req\n   */\n  public fromReq(req: LexioRequest): Lexio {\n    this._originalReq = req;\n    return this;\n  }\n\n  /**\n   *\n   * @param {Array<string>} ids\n   * @param {string} apiVersion\n   * @returns {Promise<Array<IUser>>}\n   */\n  public async getUsers(ids: Array<string>): Promise<Array<IUser>> {\n    try {\n      return await getUsers(this._originalReq, ids);\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n// const lexio: Lexio = new Lexio();\n// export { lexio };\n\nexport interface LexioRequest extends Request {\n  user: {\n    accessToken: string;\n  };\n}\n\nexport interface LexioError extends Error {\n  statusCode: number;\n}\n\nexport interface ApiVersions {\n  [key: string]: IApiServices;\n}\n\nexport interface IApiServices {\n  [key: string]: string;\n}\n\nexport interface IUser {\n  id: string;\n  username: string;\n  email: string;\n  statistics: object;\n  identities: object;\n  created: string;\n  firebaseToken: string;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;AAQA,kBAA+B,GAA6B,EAAE,GAAkB;;;YAE9E,sBAAO,EAAE,EAAC;;;CAuBX;;IC9BY,kBAAkB,GAAG,KAAK,CAAC;AAExC;IAOE;;;;QAFQ,iBAAY,GAA6B,SAAS,CAAC;KAI1D;;;;;IAMM,uBAAO,GAAd,UAAe,GAAiB;QAC9B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QACxB,OAAO,IAAI,CAAC;KACb;;;;;;;IAQY,wBAAQ,GAArB,UAAsB,GAAkB;;;;;;;wBAE7B,qBAAM,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,EAAA;4BAA7C,sBAAO,SAAsC,EAAC;;;wBAE9C,MAAM,GAAC,CAAC;;;;;KAEX;IACH,YAAC;CAAA,IAAA;;;;;"}