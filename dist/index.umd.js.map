{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n  // import \"core-js/fn/array.find\"\n  // ...\n// import { getUsers } from \"./services/authentication\";\nimport { Request } from \"express\";\n\nexport const LATEST_API_VERSION = '5.0';\n\nexport default class Lexio {\n\n  /**\n   *\n   */\n  private _originalReq: LexioRequest | undefined = undefined;\n\n  constructor() {\n\n  }\n\n  /**\n   *\n   * @param {LexioRequest} req\n   */\n  public fromReq(req: LexioRequest): Lexio {\n    this._originalReq = req;\n    return this;\n  }\n\n  // /**\n  //  *\n  //  * @param {Array<string>} ids\n  //  * @param {string} apiVersion\n  //  * @returns {Promise<Array<IUser>>}\n  //  */\n  // public async getUsers(ids: Array<string>): Promise<Array<IUser>> {\n  //   try {\n  //     return await getUsers(this._originalReq, ids);\n  //   } catch (e) {\n  //     throw e;\n  //   }\n  // }\n}\nconst lexio: Lexio = new Lexio();\nexport { lexio };\n\nexport interface LexioRequest extends Request {\n  user: {\n    accessToken: string;\n  };\n}\n\nexport interface LexioError extends Error {\n  statusCode: number;\n}\n\nexport interface ApiVersions {\n  [key: string]: IApiServices;\n}\n\nexport interface IApiServices {\n  [key: string]: string;\n}\n\nexport interface IUser {\n  id: string;\n  username: string;\n  email: string;\n  statistics: object;\n  identities: object;\n  created: string;\n  firebaseToken: string;\n}\n"],"names":[],"mappings":";;;;;;MAMa,kBAAkB,GAAG,KAAK,CAAC;EAExC;MAOE;;;;UAFQ,iBAAY,GAA6B,SAAS,CAAC;OAI1D;;;;;MAMM,uBAAO,GAAd,UAAe,GAAiB;UAC9B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;UACxB,OAAO,IAAI,CAAC;OACb;MAeH,YAAC;EAAD,CAAC,IAAA;MACK,KAAK,GAAU,IAAI,KAAK,EAAE;;;;;;;;;;;;;;"}